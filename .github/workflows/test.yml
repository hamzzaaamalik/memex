name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true
        components: rustfmt, clippy
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt -- --check
      working-directory: rust-core
      
    - name: Run clippy
      run: cargo clippy -- -D warnings
      working-directory: rust-core
      
    - name: Build
      run: cargo build --verbose
      working-directory: rust-core
      
    - name: Run unit tests
      run: cargo test --lib --verbose -- --test-threads=1
      working-directory: rust-core
      
    - name: Run integration tests
      run: cargo test --test integration_tests --verbose -- --test-threads=1
      working-directory: rust-core
      
    - name: Run FFI tests
      run: cargo test --test ffi_tests --verbose -- --test-threads=1
      working-directory: rust-core
      
    - name: Run property-based tests
      run: cargo test --test property_tests --verbose -- --test-threads=1 || true
      working-directory: rust-core
      
    - name: Build release
      run: cargo build --release --verbose
      working-directory: rust-core
      
    - name: Test release build
      run: cargo test --release --verbose -- --test-threads=1
      working-directory: rust-core

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
      
    - name: Run coverage
      run: cargo tarpaulin --out Xml --verbose
      working-directory: rust-core
      
    - name: Upload to codecov.io
      uses: codecov/codecov-action@v3
      with:
        file: rust-core/cobertura.xml
        fail_ci_if_error: true

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Run benchmarks
      run: cargo bench
      working-directory: rust-core
      
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'cargo'
        output-file-path: rust-core/target/criterion/report/index.html
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit
      working-directory: rust-core